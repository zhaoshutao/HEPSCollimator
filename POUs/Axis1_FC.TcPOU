<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Axis1_FC" Id="{491532fc-0657-4755-a747-623184d83749}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Axis1_FC
VAR
	      Axis1_PositiveJog_run           : BOOL;(*电机1正向运行标志*)
          Axis1_NegativeJog_run           : BOOL;(*电机1反向运行标志*)
	      Axis1_PositiveJog_run1          : BOOL;(*电机1正向运行标志*)
          Axis1_PositiveJog_run11         : BOOL;(*电机1正向运行标志*)
          Axis1_NegativeJog_run1          : BOOL;(*电机1反向运行标志*)
          Axis1_NegativeJog_run11         : BOOL;(*电机1反向运行标志*)
          Axis1_Positionstart_run1        : BOOL;(*电机1定位运行标志*)
          Axis1_Positionstart_run11       : BOOL;(*电机1定位运行标志*)
          Axis1_Positionstart_run         : BOOL;(*电机1定位运行标志*)      
          Axis1_Positiveposition_run      : BOOL;(*电机1正向定位标志*)
	      Axis1_Negativeposition_run      : BOOL;(*电机1反向定位标志*)
          Axis1_Positionstart_STOP        : BOOL;(*电机1手动停止标志*)
          Axis1_STOP_done                 : BOOL;(*电机1手动停止完成*)
	      axis1_home_run1                 : BOOL;(*电机1手动停止完成*)
		  Axis1_Position_done1            : BOOL;
		  
		  Axis1_J1                        : BOOL;(*电机1JOG+按钮互锁*)
          Axis1_J2                        : BOOL;(*电机1JOG-按钮互锁*)
		  Axis1_P                         : BOOL;(*电机1定位按钮互锁*)
		  Axis1_P1                        : BOOL;(*电机1定位按钮互锁*)
          Axis1_R                         : BOOL;(*电机1回零按钮互锁*)
		  Axis1_C                         : BOOL;(*电机1回零按钮互锁*)
		  Axis1_S                         : BOOL;(*1#电机停止按钮互锁*)
		   Axis1_Position_auto_done       : BOOL;
                
	       Axis1_PositiveJog_rtring       :R_TRIG;
           Axis1_PositiveJog_ftring       :F_TRIG;
           Axis1_NegativeJog_rtring       :R_TRIG;
           Axis1_NegativeJog_ftring       :F_TRIG;
	       Axis1_Positionstart_rtring     :R_TRIG;
           Axis1_Positionstart_ftring     :F_TRIG;
		   Axis1_Positionstart1_rtring    :R_TRIG;
           Axis1_Positionstart1_ftring    :F_TRIG;
	       Axis1_originstart_rtring       :R_TRIG;
	       Axis1_originstart_ftring       :F_TRIG;
		   Axis1_error_ftring             :F_TRIG;
           Axis1_error_rtring             :R_TRIG;
		   Axis1_STOP_rtring              :R_TRIG;
		   Axis1_disable_delay            :TON;
		  
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Axis1_InputPositionOutOfRange THEN
	RETURN;
END_IF
(*************运行指示************)

IF  Axis1_PositiveJog_running OR Axis1_NegativeJog_running   OR  Axis1_Position_running    THEN
	Axis1_running    := TRUE;
END_IF;
IF  NOT Axis1_PositiveJog_running AND NOT  Axis1_NegativeJog_running   AND NOT   Axis1_Position_running  THEN
	Axis1_running    := FALSE;
END_IF;

(***********由限位状态给出指示灯状态**************)
(*
IF  NOT foreward_limit_axis1 THEN//触发
	foreward_limit_axis1_LED   := TRUE;//RED
ELSE
	foreward_limit_axis1_LED   := FALSE;//GREEN
END_IF;
IF  NOT reverse_limit_axis1 THEN
	reverse_limit_axis1_LED   := TRUE;//RED
ELSE
	reverse_limit_axis1_LED   := FALSE;//GREEN
END_IF;
*)
(************电机错误信息*************)

IF  axis1.NcToPlc.ErrorCode=0 THEN
	Axis1_error     := FALSE;
ELSE
	Axis1_error     := TRUE;
END_IF;

(**********屏幕按钮**互锁变量***********)

IF  E_STOP  AND Local_led AND NOT  Axis1_error  AND NOT  Axis1_NegativeJog_running 
	 AND NOT   (Axis1_NegativeJog OR Axis_All_NegativeJog)  AND  foreward_limit_axis1  AND NOT Axis1_Positionstart AND NOT  Axis1_Position_running  THEN
	Axis1_J1     := TRUE;
ELSE
	Axis1_J1     := FALSE;
END_IF;

IF  E_STOP   AND Local_led AND NOT  Axis1_error  AND NOT  Axis1_PositiveJog_running 
	 AND NOT   (Axis1_PositiveJog OR Axis_All_PositiveJog) AND  backward_limit_axis1   AND NOT Axis1_Positionstart AND NOT  Axis1_Position_running   THEN
	Axis1_J2     := TRUE;
ELSE
	Axis1_J2     := FALSE;
END_IF;

IF  E_STOP   AND Local_led AND NOT  Axis1_error  AND NOT  Axis1_PositiveJog_running 
	 AND NOT (Axis1_PositiveJog OR Axis_All_PositiveJog)  AND NOT  Axis1_NegativeJog_running  AND NOT   (Axis1_NegativeJog OR Axis_All_NegativeJog)   AND NOT Axis1_running THEN
	Axis1_P     := TRUE;
ELSE
	Axis1_P     := FALSE;
END_IF;

IF E_STOP   AND Local_led AND NOT  Axis1_error  AND NOT  Axis1_PositiveJog_running 
	 AND  NOT (Axis1_PositiveJog OR Axis_All_PositiveJog) AND NOT  Axis1_NegativeJog_running  AND NOT   (Axis1_NegativeJog OR Axis_All_NegativeJog)  AND NOT Axis1_Positionstart  AND  backward_limit_axis1  AND NOT Axis1_running  THEN
	Axis1_R     := TRUE;
ELSE
	Axis1_R     := FALSE;
END_IF;

IF E_STOP  AND Local_led AND NOT  Axis1_error  AND NOT Axis1_running  THEN
	Axis1_C     := TRUE;
ELSE
	Axis1_C     := FALSE;
END_IF;

IF E_STOP  AND Local_led AND NOT  Axis1_error  AND  Axis1_running  THEN
	Axis1_S     := TRUE;
ELSE
	Axis1_S     := FALSE;
END_IF;

//1#电机温度
temp_Axis1  :=INT_TO_REAL(PT_Axis1)/10.0;

(***********电机1错误时***********)
Axis1_error_ftring(CLK:=Axis1_error , Q=> );
Axis1_error_rtring(CLK:=Axis1_error , Q=> );
IF ( E_STOP_led OR Axis1_error )  OR ( ((Axis1_PositiveJog AND  NOT (Axis1_NegativeJog OR Axis_All_NegativeJog)) 
	  OR  (Axis1_Positionstart_run AND NOT (Axis1_PositiveJog OR Axis_All_PositiveJog) AND  NOT (Axis1_NegativeJog OR Axis_All_NegativeJog)  AND Axis1_Positiveposition_run  ) )AND    (NOT foreward_limit_axis1  )) OR   ((((Axis1_NegativeJog OR Axis_All_NegativeJog) AND NOT Axis1_PositiveJog )   OR(Axis1_Positionstart_run AND NOT Axis1_PositiveJog  AND  NOT (Axis1_NegativeJog OR Axis_All_NegativeJog) AND  Axis1_Negativeposition_run)) AND (NOT backward_limit_axis1) )   THEN
     Axis1_Positionstart_STOP           := TRUE;
     Axis1_PositiveJog                  := FALSE;
	 Axis_All_PositiveJog               := FALSE;
     Axis1_PositiveJog_run1             := FALSE;
     Axis1_PositiveJog_run              := FALSE;
     Axis1_NegativeJog                  := FALSE;
	 Axis_All_NegativeJog               := FALSE;
     Axis1_NegativeJog_run1             := FALSE;
     Axis1_NegativeJog_run              := FALSE;
     Axis1_PositiveJog_running          := FALSE;
     Axis1_NegativeJog_running          := FALSE;
     Axis1_Positionstart_run            := FALSE;
     Axis1_Position_running             := FALSE;	
     Axis1_Positionstart                := FALSE;	
     Axis1_Position_done                := FALSE;	
     Axis1_Positionstart_run1           := FALSE;
     Axis1_Positionstart_run            := FALSE;
     Axis1_Positiveposition_run         := FALSE;
     Axis1_Negativeposition_run         := FALSE;
	 Axis1_STOP                         := FALSE;
	 Axis_All_STOP                      := FALSE;
END_IF;

(************1#电机JOG+***********)
Axis1_PositiveJog_rtring (CLK:=(Axis1_PositiveJog OR Axis_All_PositiveJog) , Q=> );
IF  E_STOP  AND NOT Axis1_error AND foreward_limit_axis1  AND NOT  Axis1_running 
	  AND NOT (Axis1_NegativeJog OR Axis_All_NegativeJog) AND NOT Axis1_Positionstart   AND   Axis1_PositiveJog_rtring.Q  THEN
 IF NOT Power_axis1.Status  THEN
            power_do1                := TRUE;		   
            END_IF;			    		     	   					
           Axis1_PositiveJog_run1               := TRUE;
           Axis1_PositiveJog_run                := FALSE;		           
           Axis1_NegativeJog_run1               := FALSE;
           Axis1_NegativeJog_run                := FALSE;  
           Axis1_Positionstart_run1             := FALSE;
           Axis1_Positionstart_run              := FALSE;	          
           axis1_home_run1                      := FALSE;        
END_IF;

IF  (Axis1_PositiveJog OR Axis_All_PositiveJog)  AND  E_STOP  AND NOT Axis1_error  AND Axis1_PositiveJog_run1  AND Power_axis1.Status THEN
         Axis1_PositiveJog_run                := TRUE;
           IF axis1.NcToPlc.ActVelo <>0 THEN
         Axis1_PositiveJog_running          := TRUE;
         Axis1_NegativeJog_running          := FALSE;
         Axis1_PositiveJog_run1              := FALSE;
      END_IF;
END_IF;


(***********1#*电机JOG-***********)
Axis1_NegativeJog_rtring (CLK:=(Axis1_NegativeJog OR Axis_All_NegativeJog) , Q=> );
IF  E_STOP  AND NOT Axis1_error  AND backward_limit_axis1   AND NOT  Axis1_running 
	  AND NOT Axis1_PositiveJog  AND NOT Axis1_Positionstart  AND   Axis1_NegativeJog_rtring.Q  THEN
 IF NOT Power_axis1.Status THEN
            power_do1                := TRUE;			
            END_IF;
           Axis1_NegativeJog_run1               := TRUE;
           Axis1_NegativeJog_run                := FALSE;
           Axis1_PositiveJog_run1               := FALSE;
           Axis1_PositiveJog_run                := FALSE;		         
           Axis1_Positionstart_run1             := FALSE;
           Axis1_Positionstart_run              := FALSE;	            
           axis1_home_run1                      := FALSE;        
END_IF;

IF  (Axis1_NegativeJog OR Axis_All_NegativeJog)  AND  E_STOP  AND NOT Axis1_error  AND Axis1_NegativeJog_run1  AND Power_axis1.Status   THEN
         Axis1_NegativeJog_run                := TRUE;
      IF axis1.NcToPlc.ActVelo <>0 THEN
         Axis1_PositiveJog_running          := FALSE;
         Axis1_NegativeJog_running          := TRUE;
         Axis1_NegativeJog_run1             := FALSE;
      END_IF;
END_IF;


(***********1#*电机JOG停止************)
Axis1_PositiveJog_ftring(CLK:=(Axis1_PositiveJog OR Axis_All_PositiveJog) , Q=> );
Axis1_NegativeJog_ftring(CLK:=(Axis1_NegativeJog OR Axis_All_NegativeJog) , Q=> );
IF ( (Axis1_PositiveJog_ftring.Q  AND Axis1_PositiveJog_running  ) OR (Axis1_NegativeJog_ftring.Q AND Axis1_NegativeJog_running ))   AND NOT Axis1_Positionstart   THEN
           Axis1_PositiveJog_run1                := FALSE;
           Axis1_PositiveJog_run                 := FALSE;
           Axis1_NegativeJog_run1                := FALSE;
           Axis1_NegativeJog_run                 := FALSE;
           Axis1_PositiveJog_running             := FALSE;
           Axis1_NegativeJog_running             := FALSE;
END_IF;

(************1#*电机定位运行*************)
Axis1_Positionstart_rtring (CLK:=Axis1_Positionstart , Q=> );
IF  E_STOP  AND NOT Axis1_error AND NOT  Axis1_running   AND NOT (Axis1_PositiveJog OR Axis_All_PositiveJog)
	  AND NOT (Axis1_NegativeJog OR Axis_All_NegativeJog)   AND  ( Axis1_Positionstart_rtring.Q OR Axis1_Positionstart1_rtring.Q ) THEN
          Axis1_Positionstart_STOP            := FALSE;
 	IF NOT Power_axis1.Status THEN
          power_do1                := TRUE;			
    END_IF;  			

           Axis1_Positionstart_run1             := TRUE;
           Axis1_Positionstart_run              := FALSE;
		   Axis1_NegativeJog_run1               := FALSE;
           Axis1_NegativeJog_run                := FALSE;
           Axis1_PositiveJog_run1               := FALSE;
           Axis1_PositiveJog_run                := FALSE;		  
           axis1_home_run1                      := FALSE; 
           Axis1_Position_done                  := FALSE; 		   
		   Axis1_Position_done1                 := FALSE; 		
		   Axis1_Position_running               := TRUE;	
         	     	  		   		   	
	IF  (Axis1_TargetPosition_retain > Axis1_CurrentPosition_retain+0.0005)  THEN
		Axis1_Positiveposition_run       := TRUE;
		Axis1_Negativeposition_run       := FALSE;
	END_IF;
	IF  (Axis1_TargetPosition_retain < Axis1_CurrentPosition_retain-0.0005)  THEN
		Axis1_Positiveposition_run       := FALSE;
		Axis1_Negativeposition_run       := TRUE;
	END_IF;

	IF  (Axis1_TargetPosition_retain >= Axis1_CurrentPosition_retain-0.0005) AND (Axis1_TargetPosition_retain <= Axis1_CurrentPosition_retain+0.0005) THEN
		Axis1_Positiveposition_run       := FALSE;
		Axis1_Negativeposition_run       := FALSE;
		Axis1_Positionstart              := FALSE;
		Axis1_Position_done1             := TRUE;
		Axis1_Position_running           := FALSE;
	END_IF;
END_IF;

IF   E_STOP  AND NOT Axis1_error  AND Axis1_Positionstart_run1  AND Power_axis1.Status  AND ((Axis1_Positiveposition_run AND foreward_limit_axis1 )OR (Axis1_Negativeposition_run AND backward_limit_axis1 ) )  THEN
         Axis1_Positionstart_run                 := TRUE;		      			 
         Axis1_Positionstart_run1                := FALSE;
END_IF;

(***********1#*电机定位完成***********)
IF   E_STOP  AND NOT Axis1_error AND NOT (Axis1_PositiveJog OR Axis1_PositiveJog)   AND NOT (Axis1_NegativeJog OR Axis_All_NegativeJog) AND Axis1_Positionstart_run AND Axis1_running  AND Power_axis1.Status  AND  Axis1_Position_done1  THEN
         Axis1_Positionstart_run                 := FALSE;        		     
         Axis1_Position_done1                    := FALSE;
         Axis1_Position_running                  := FALSE;	
         Axis1_Positionstart                     := FALSE;
         Axis1_Position_done                     := TRUE;
	 
END_IF;

(***********1#电机手动停止***********)
Axis1_STOP_rtring(CLK:=(Axis1_STOP OR Axis_All_STOP) , Q=> );
IF   E_STOP  AND NOT Axis1_error   AND Axis1_running AND Power_Axis1.Status  AND Axis1_STOP_rtring.Q THEN
         Axis1_Positionstart_STOP           := TRUE;
         Axis1_Positionstart_run            := FALSE;
         Axis1_Position_running             := FALSE;
         Axis1_Positionstart                := FALSE;
         Axis1_Position_done                := FALSE;
	     Axis1_Positionstart_run1           := FALSE;             
		 Axis1_Position_done1               := FALSE; 
END_IF;

//使能
Power_axis1(
	Enable:=power_do1 ,
	Enable_Positive:=foreward_limit_axis1,
	Enable_Negative:=backward_limit_axis1,
	Override:=100 ,
	BufferMode:= ,
	Axis:=axis1,
	Status=> ,
	Busy=> ,
	Active=> ,
	Error=> ,
	ErrorID=> );
//Jog	
jog_axis1(
	JogForward:=Axis1_PositiveJog_run ,
	JogBackwards:= Axis1_NegativeJog_run,
	Mode:=MC_JOGMODE_INCHING ,
	POSITION:= Axis1_JogPosition_retain,
	Velocity:=Axis1_Setvelocity,
	Acceleration:= ,
	Deceleration:= ,
	Jerk:= ,
	Axis:= axis1,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );	
//Position Move
move_A1(
	Execute:=Axis1_Positionstart_run ,
	Position:=Axis1_TargetPosition_retain,
	Velocity:=Axis1_Setvelocity ,
	Acceleration:= ,
	Deceleration:= ,
	Jerk:= ,
	BufferMode:= ,
	Options:= ,
	Axis:= axis1,
	Done=>Axis1_Position_done1 ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );
//Reset
MC_Reset1(
	Execute:=MC_Reset1_Execute ,
	Axis:= Axis1,
	Done=>MC_Reset1_Done ,
	Error=> ,
	ErrorID=> );
IF  MC_Reset1_Execute   AND  MC_Reset1_Done  THEN
MC_Reset1_Execute  :=FALSE;
END_IF;
//STOP
stop_axis1(
	Execute:=Axis1_Positionstart_STOP ,
	Deceleration:= ,
	Jerk:= ,
	Options:= ,
	Axis:=Axis1 ,
	Done=>Axis1_STOP_done ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

IF  Axis1_Positionstart_STOP AND Axis1_STOP_done  THEN
	Axis1_Positionstart_STOP  :=FALSE;
	Axis1_STOP_done                :=FALSE;
END_IF;

IF dd  THEN
	Axis1_CurrentPosition_retain  :=LREAL_TO_REAL(axis1.NcToPlc.ActPos);
	Axis1_Currentvelocity  :=LREAL_TO_REAL(axis1.NcToPlc.ActVelo);
END_IF;

Axis1_disable_delay(in := (Power_axis1.Status  AND NOT  Axis1_running   ), pt := T#5S);
IF  Power_axis1.Status  AND  NOT  Axis1_running    AND  Axis1_disable_delay.Q  THEN
	power_do1                     := FALSE;
END_IF;

]]></ST>
    </Implementation>
    <LineIds Name="Axis1_FC">
      <LineId Id="551" Count="0" />
      <LineId Id="556" Count="1" />
      <LineId Id="6" Count="9" />
      <LineId Id="558" Count="0" />
      <LineId Id="16" Count="9" />
      <LineId Id="39" Count="11" />
      <LineId Id="494" Count="0" />
      <LineId Id="51" Count="5" />
      <LineId Id="495" Count="0" />
      <LineId Id="57" Count="5" />
      <LineId Id="496" Count="0" />
      <LineId Id="63" Count="3" />
      <LineId Id="73" Count="1" />
      <LineId Id="497" Count="0" />
      <LineId Id="75" Count="15" />
      <LineId Id="93" Count="7" />
      <LineId Id="498" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="559" Count="0" />
      <LineId Id="103" Count="2" />
      <LineId Id="560" Count="0" />
      <LineId Id="106" Count="5" />
      <LineId Id="113" Count="6" />
      <LineId Id="561" Count="0" />
      <LineId Id="120" Count="4" />
      <LineId Id="493" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="135" Count="21" />
      <LineId Id="499" Count="0" />
      <LineId Id="157" Count="2" />
      <LineId Id="167" Count="9" />
      <LineId Id="178" Count="23" />
      <LineId Id="500" Count="0" />
      <LineId Id="202" Count="3" />
      <LineId Id="211" Count="41" />
      <LineId Id="254" Count="11" />
      <LineId Id="267" Count="77" />
      <LineId Id="446" Count="0" />
      <LineId Id="345" Count="1" />
      <LineId Id="348" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="400" Count="2" />
      <LineId Id="355" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>